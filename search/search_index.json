{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#_1","title":"\u6d4b\u8bd5\u4e00\u4e0b\u4ee3\u7801\u5757","text":"<pre><code>std::cout &lt;&lt; \"Hello World!\" &lt;&lt; std::endl;\n</code></pre>"},{"location":"#_2","title":"\u6d4b\u8bd5\u6570\u5b66\u516c\u5f0f","text":"<p>\u884c\u5185\u516c\u5f0f \\(a+b=c\\)</p> <p>\u516c\u5f0f\u5757</p> \\[     \\int \\frac{1}{x} dx = \\ln x \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/cg/","title":"computer grapics","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/Games101/Assignment3/code_answer/","title":"Code answer","text":"<pre><code>for (auto&amp; light : lights)\n    {\n        // TODO: For each light source in the code, calculate what the *ambient*, *diffuse*, and *specular* \n        // components are. Then, accumulate that result on the *result_color* object.\n        // components are. Then, accumulate that result on the *result_color* object.\n        Eigen::Vector3f I=light.intensity;            //\u5b9a\u4e49\u4e00\u4e2a\u5149\u7684\u5f3a\u5ea6\n        Eigen::Vector3f P=(light.position-point).normalized();   //\u5b9a\u4e49\u5149\u548c\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u5e76\u4e14\u6807\u51c6\u5316\n        Eigen::Vector3f N=normal.normalized();                   //\u6cd5\u5411\u91cf\u6807\u51c6\u5316\n        Eigen::Vector3f V=(eye_pos-point).normalized();          //\u5b9a\u4e49\u4e86\u76f8\u673a\u5230\u70b9\u7684\u8ddd\u79bb\u5e76\u4e14\u6807\u51c6\u5316\n        Eigen::Vector3f H=(P+V).normalized();                    //\u534a\u89d2\u5411\u91cfH\u7684\u6807\u51c6\u5316\n\n        float R=(light.position-point).dot((light.position-point));\n\n\n        Eigen::Vector3f La=ka.cwiseProduct(amb_light_intensity);          //\u8ba1\u7b97LA\n        Eigen::Vector3f Ld=kd.cwiseProduct(I/R)*std::max(0.f,N.dot(P));   //\u8ba1\u7b97Ld\n        Eigen::Vector3f Ls=ks.cwiseProduct(I/R)*std::pow (std::max(0.f,N.dot(H)),p);   //\u8ba1\u7b97LS\n        result_color=result_color+La+Ld+Ls;                                 //\u8ba1\u7b97\u603b\u7684\u989c\u8272\n\n    }\n</code></pre>"}]}